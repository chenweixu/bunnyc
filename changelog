#===================================================================
2019-03-02 00:39:04
1. 增加部分文档
2. 增加web服务的监控
3. 重构数据库表
4. 适应 redis-py-3.0.1 的变化
#===================================================================
2019-01-14 22:06:58
1. 拆分成agent采集上报、接收，主动采集、格式化处理等不同组件
2. 除agent，都往docker方面靠拢，去除服务的后台运行，都改为前台运行(成为docker主进程)
3. 移除ARRAY硬件负载均衡器的采集项
4. 移除oracle数据库性能指标和业务指标的采集项
5. 移除xlsx报表
6. 暂时移除短信告警功能
7. 移除http服务指标监控项
#===================================================================
2016-09-11 02:34:11

1 配置文件由 json 格式转为 yaml
2 优化客户端采集方法
3 优化数据处理方法
4 数据库性能数据和表空间数据入库
5 增加 ansible 的发布方式
6 优化xlsx的报表样式
#===================================================================
2016-09-07 01:37:32

增加短信监控功能，当前增加的功能
    1 memcached 的当前连接数
    2 tcp port
        bunnyc servcer tcp port
        bunnyc mysql tcp port
        bunnyc email proxy tcp port
#===================================================================
2016-08-31 03:25:41

1 修改 debug 日志方法，由原来的 if debug: 改为在引用类时传递日志级别；
    在 cwx.My_log() 中新增其它级别的日志记录方法
2 在 debug 输出中加上数据源的 ip 地址
3 修复bug:
    get oracle system data 时原使用 get_fetchone()方法，导致获取的值是字符串
    现在修改为 get_one_value() ，获取为 int
    修复通过snmp 采集 array数据时错误的oid号
#===================================================================
2016-08-29 01:57:08
1 版本迁移到 python3
2 增加主要程序的 debug 模式
3 大部分模块新增异常检测
4 功能新增
    BunnyC_client.py 增加了网络、磁盘数据等信息的采集
    BunnyC_get.py 增加 memcached 的数据采集
    BunnyC_server.py 数据先存入 redis 再存入mysql
    cwx.py 由 Bunnyc 修改，定位为 与业务无关的基类；
    workssodb.py 新增项，定位为 oracle 的常用 sql和操作基类；
    work.py 新增项，定位为 项目内的业务基类
    work_day_form.py 日报生成程序
5 日报的采集方式，改由原 昨天下午5点到今天下午5点的时间段为 昨天全时间段
    于是修改了大部分 sql ，不再跨分区表查询
6 修改了部分业务查询表的名称
#===================================================================
11:36 2016/1/7
1 重构 Bunnyc_server.py ，改由子线程方式实现，并添加参数起停功能；
    分别监听TCP，监听UDP，存入数据库
2 Bunnyc.py 添加 daemon 类，用户启动后台进程
    Mail_Model 类添加新方法，用于发送外部传来的文件
3 整合各种主动采集数据的功能为 Bunnyc_get.py
    多线程方式实现，采集 oracle array 数据；存入 mysql 和 redis
4 conf.json 添加代理邮件收件人
5 BunnyC_email_proxy.py 邮件代理程序，监听 8725 端口，将邮件代理发送出去
#===================================================================
2:46 2015/12/24
1 添加 conf.json 配置文件，将邮箱, oracle, bunnyc 数据库配置信息放到当中；
2 修改 Bunnyc.py 的email 模块，使其更加模块化，将email配置放入配置文件中；
    memcache 模块取消，改到 workreport.py 中实现
3 添加 workreport.py 模块，用于采集日报所需要的数据，为 output_rb.py 调用；
    该采集模块中，调整了部分SQL的语法，数据库查询时取消所有排序，都由py来排序；
4 output_rb.py 为一级程序，不再采集数据，而只负责归纳和专注报表样式和输出
5 bunnyc.py 模块中取消 uninx 的paramiko实现，与其ssh相关的都统一使用 My_ssh 类
6 其他脚本内容同步修正基础库带来的变更
7 合并数据库将 server_run_info 的历史数据，导入 server_run_data 表
#===================================================================
# 3:05 2015/12/20
1 在 Bunnyc.py 中加入日志记录类，加入 ip 转 num 函数；
2 数据库端变化：
    合并 server_proc_info server_run_info 两张表为 server_run_data 表；
        除 dev_type 字段外，都不再使用 vchar 类型；
    使用新的 array 数据表，增加性能字段；
    所有 IP 地址改用数字的方式记录；
3 重构 array 负载均衡器的数据获取方法，不再使用 ssh 方式，修改为 snmp 获取，每5分钟轮询；
4 日报方面主要是增加输出字段，修改SQL；
5 客户端方面无改动

#===================================================================
# 15:51 2015/12/2
# 在业务sql部分，统计登录信息时，设定时间限制，当天需要小于 17 时；
where t.HOUR < 17

# 2015-11-05
客户端采集部分，加入 CPU的 user/nice/system/idle/iowait 等信息

# 2015-11-04 21:45:13
原本 py2.4.3不支持 json，于是采用字符串组合成json格式后发送给服务器；
现在改为在客户端安装 python-simplejson 包来使客户端支持 json 编码；

# 2015-11-04 11:07:52
修改表名：网站登出接口表，用户临时凭证接口表，用户Assertion查询接口表

# 2015-11-02 10:44:51
修改日报生成脚本 output_rb.py 中的 用户会话报活表名；
#===================================================================
# 2015-11-02 10:34:22
# 项目描述：
程序目前实现的功能：
1 客户端采集本机的数据，组合成json形式发送往服务器端
    采集频率为:linux 1 min,unix 5 min 上传，array 1 h
    采集数据：cpu使用率,内存使用率，交换分区使用率等信息

2 服务器端，开启2个守护进程监听tcp/udp的8716端口；
    守护进程在收到报文后转成json格式，传如一个队列中；

3 入库进程，自队列中取数，然后解析后存入 10.x.x.26 的 mysql 数据库中；

4 报表程序：每天下午17时执行，先收集mysql数据库中的主机信息，
    然后采集memcache及oracle数据库中的业务数据资料，并生成xlsx文档，
    之后再通过 email 发送给运维人员；
#===================================================================
